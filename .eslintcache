[{"/home/decent/projects/rogue-tinker/src/index.js":"1","/home/decent/projects/rogue-tinker/src/App.js":"2","/home/decent/projects/rogue-tinker/src/reportWebVitals.js":"3","/home/decent/projects/rogue-tinker/src/components/HeaderBar.js":"4","/home/decent/projects/rogue-tinker/src/components/StatsBar.js":"5","/home/decent/projects/rogue-tinker/src/pages/ImportExport.js":"6","/home/decent/projects/rogue-tinker/src/pages/core.js":"7","/home/decent/projects/rogue-tinker/src/pages/BaseRoll.js":"8","/home/decent/projects/rogue-tinker/src/components/CareerSelector.js":"9","/home/decent/projects/rogue-tinker/src/components/resources/StopScroll.js":"10","/home/decent/projects/rogue-tinker/src/components/ObjectBoxes.js":"11","/home/decent/projects/rogue-tinker/src/components/ObjectPopup.js":"12","/home/decent/projects/rogue-tinker/src/components/HomeworldSelector.js":"13"},{"size":548,"mtime":1609421963588,"results":"14","hashOfConfig":"15"},{"size":13497,"mtime":1609900628165,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1609223626481,"results":"17","hashOfConfig":"15"},{"size":177,"mtime":1609224481298,"results":"18","hashOfConfig":"15"},{"size":11251,"mtime":1609739730701,"results":"19","hashOfConfig":"15"},{"size":180,"mtime":1609235018341,"results":"20","hashOfConfig":"15"},{"size":4682,"mtime":1609868305563,"results":"21","hashOfConfig":"15"},{"size":7415,"mtime":1609388471815,"results":"22","hashOfConfig":"15"},{"size":3334,"mtime":1609899048618,"results":"23","hashOfConfig":"15"},{"size":1463,"mtime":1609471506565,"results":"24","hashOfConfig":"15"},{"size":3091,"mtime":1609872403861,"results":"25","hashOfConfig":"15"},{"size":2287,"mtime":1609773633972,"results":"26","hashOfConfig":"15"},{"size":4356,"mtime":1609899063802,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mss79z",{"filePath":"30","messages":"31","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},"/home/decent/projects/rogue-tinker/src/index.js",[],"/home/decent/projects/rogue-tinker/src/App.js",["62","63","64","65","66","67","68"],"/home/decent/projects/rogue-tinker/src/reportWebVitals.js",[],"/home/decent/projects/rogue-tinker/src/components/HeaderBar.js",[],["69","70"],"/home/decent/projects/rogue-tinker/src/components/StatsBar.js",["71","72","73","74","75","76"],"import React from 'react';\nimport { Grid, Container, Button, Tooltip, withStyles, FormControl, InputLabel, Select, MenuItem, ListSubheader} from '@material-ui/core';\nimport './StatsBar.css';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ls from 'local-storage'\n\n\nconst StyledDropdown = withStyles({\n    root: {\n     // background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n      borderRadius: 3,\n      border: 0,\n      color: 'white',\n      fontSize: '20px',\n      padding: '10px 10px',\n      margin:'',\n      lineHeight: '10px',\n    },\n    selectMenu: {\n        minHeight:'0px'\n    },\n    icon: {\n        color: 'white'\n    },\n    label: {\n      textTransform: 'capitalize',\n    },\n  })(Select);\n\n\nconst HtmlTooltip = withStyles(() => ({\n    tooltip: {\n      backgroundColor: '#4c4c4c',\n        font: 12,\n      color: 'orange',\n    },\n  }))(Tooltip);\n\nexport default class HeaderBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.toggleVerboseStats = this.toggleVerboseStats.bind(this);\n        this.updateAllocations = this.updateAllocations.bind(this);\n        this.calcScores = this.calcScores.bind(this);\n        this.toggleScorePlacements = this.toggleScorePlacements.bind(this);\n\n        this.state = {\n            verboseAttr: false,\n        }\n     }\n\n     toggleVerboseStats () {\n         this.calcScores()\n         let list = document.getElementsByClassName(\"verbose\")\n         if (this.state.verboseAttr) {\n    \n            for (var i = 0; i < list.length; i++) {\n                list[i].classList.add('hidden'); \n            }\n            this.setState({verboseAttr: false})\n         } else {\n            for (var i = 0; i < list.length; i++) {\n                list[i].classList.remove('hidden'); \n            }\n            this.setState({verboseAttr: true})\n         }\n        \n    }\n\n\n    updateAllocations (e, value) {\n        let vPos = parseInt(e.nativeEvent.originalTarget.id.slice(4))\n        let tAllocatedValues = this.props.allocatedValues\n        let tUnallocatedValues = this.props.unallocatedValues\n        if (e.target.value === \"\") {\n            delete tAllocatedValues[value]\n        } else {\n            if (tAllocatedValues[value] !== undefined) {\n                tUnallocatedValues[tAllocatedValues[value]['vPos']] = tAllocatedValues[value]['value']\n                delete tAllocatedValues[tAllocatedValues[value]]\n            }\n            if (tUnallocatedValues[vPos] === undefined) {\n                Object.keys(tAllocatedValues).forEach(key => {\n                    if (tAllocatedValues[key]['vPos'] === vPos) {\n                        tUnallocatedValues[tAllocatedValues[key]['vPos']] = tAllocatedValues[key]['value']\n                        delete tAllocatedValues[key]\n                    }\n                })\n                \n            }\n    \n            tAllocatedValues[value] = {'vPos': vPos, 'value': tUnallocatedValues[e.target.value]}\n            delete tUnallocatedValues[e.target.value]\n        }\n\n        this.props.updateParentState({allocatedValues: tAllocatedValues, unallocatedValues: tUnallocatedValues})\n\n    }\n\n\n    calcScores() {\n        let tScores = this.props.allocatedValues;\n        let tBase = [0,0,0,0,0,0,0,0,0]\n\n        for (let index = 0; index < Object.keys(tScores).length; index++) {\n            const element = tScores[Object.keys(tScores)[index]];\n            tBase[Object.keys(tScores)[index]] = element['value'];\n        }\n\n        let tBonus = this.props.skillBonusSum\n        let tPen = this.props.skillPenaltySum\n        let tTotal = this.props.finalScores\n        console.log(tPen)\n        for (let index = 0; index < 9; index++) {\n            tTotal[index] = tBase[index] + tBonus[index] - tPen[index]\n        }\n\n        this.props.updateParentState({finalScores:tTotal, baseScores: tBase})\n\n    }\n\n    toggleScorePlacements () {\n        if (Object.keys(this.props.allocatedValues).length === 9 && this.props.scorePlacementMode) {\n            this.props.updateParentState({scorePlacementMode: false})\n            this.calcScores()\n\n        } else if (!this.props.scorePlacementMode) {\n            let response = window.confirm(\"Are you sure?\");\n            if (response) {\n\n                let unalloc = {}\n\n                for (let i = 0; i < this.props.baseRolls.length; i++) {\n                    unalloc[i] = this.props.baseRolls[i]\n                }\n\n                this.props.updateParentState({scorePlacementMode: true, allocatedValues: {}, unallocatedValues: unalloc})\n            }\n        } else {\n            alert('All values must be allocated!')\n        }\n        \n    }\n\n    componentDidMount() {\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n      \n    \n\n    render () {\n        // console.log('skillbar props: ', this.props)\n\n        let skillData = {\n            skillNames: ['Weapon Skill', 'Ballistic Skill', 'Strength', 'Toughness', 'Agility', 'Intelligence', 'Perception', 'Willpower', 'Fellowship'],\n            skillAbbr: ['WS', 'BS', 'S', 'T', 'Ag', 'Int', 'Per', 'WP', 'Fel'],\n            skillBase: this.props.baseRolls,\n            skillPenaltySum: this.props.skillPenaltySum,\n            skillBonusSum: this.props.skillBonusSum,\n            skillFinal: this.props.finalScores,\n            skillBonuses: [{'Sick Cunt': 3, 'Shooty Boi': 2}, {}, {}, {}, {}, {}, {}, {}, {}],\n            skillPenaltys: [{'Sick Cunt': 3, 'Shooty Boi': 2}, {}, {}, {}, {}, {}, {}, {}, {}],\n            unallocatedValues: this.props.unallocatedValues,\n            allocatedValues: this.props.allocatedValues\n        };\n        // console.log('stats', this.props.unallocatedValues)\n        \n        return (\n            <Container maxWidth=\"md\">\n                <div className=\"pointButtons\">\n                    <div class='toggleVstats' onClick={this.toggleVerboseStats}>Toggle Verbose Stats</div>\n                    <div class='toggleVstats' onClick={this.toggleScorePlacements}>{this.props.scorePlacementMode ? \"Save Placements\" : \"Reset Placements\"}</div>\n                </div>\n                <Grid container justify=\"center\" direction=\"row\" spacing={2}>\n                {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((value) => (\n                    <Grid item xs={1.8}>\n                        <Grid container className='MainAttr' direction=\"column\" spacing={1}>\n                            <Grid className='SkillName' item>\n                            {skillData['skillNames'][value]}\n                            </Grid>\n\n                            <Grid className='SkillAbbr' item>\n                                {skillData['skillAbbr'][value]}\n                            </Grid>\n\n                            {this.props.scorePlacementMode ?\n                            <Grid className='SkillValue' item>\n                            \n                            <FormControl>\n                                <StyledDropdown classes={{root: 'text'}} onChange={(e) => (this.updateAllocations(e, value), this.calcScores())} id=\"grouped-select\">\n                                    <ListSubheader disabled='true'>Free</ListSubheader>\n                            \n                                    {Object.keys(skillData['unallocatedValues']).map((value) => (\n                                    <MenuItem id={`uVDB${value}`} key={`uVDB${value}`} value={value}>{skillData['unallocatedValues'][value]}</MenuItem>))}\n                                    \n                                    <ListSubheader>Allocated</ListSubheader>\n                                    {Object.keys(skillData['allocatedValues']).map((value) => (\n                                    <MenuItem disabled='true' id={`aVDB${value}`} key={`aVDB${value}`} value={skillData['allocatedValues'][value]['vPos']}>{skillData['allocatedValues'][value]['value']}</MenuItem>))}\n\n                                    </StyledDropdown>\n                            </FormControl>\n\n\n                            <p className='NumTag'>Starting</p>\n                            </Grid>\n                            :\n                            <Grid className='SkillValue verbose hidden' item>\n                            <p className='Num'>{skillData['skillBase'][value]}</p>\n                            <p className='NumTag'>Starting</p>\n                            </Grid>\n                            }\n                            \n                            \n                            \n\n                                {Object.keys(skillData['skillBonuses'][value]).length > 0 ?\n                            <HtmlTooltip placement='right' title={\n                                Object.keys(skillData['skillBonuses'][value]).map((v) => (<p>{v}: - {skillData['skillBonuses'][value][v]}</p>))\n                            }>\n                                <Grid className='SkillValue verbose hidden' item>\n                                <p className='Num'>+ {skillData['skillBonusSum'][value]}</p>\n                                <p className='NumTag'>Bonuses</p>\n                                </Grid>\n                            </HtmlTooltip>\n                            :\n                            <Grid className='SkillValue verbose hidden' item>\n                                <p className='Num'>+ {skillData['skillBonusSum'][value]}</p>\n                                <p className='NumTag'>Bonuses</p>\n                            </Grid>\n                            }\n\n                            {Object.keys(skillData['skillPenaltys'][value]).length > 0 ?\n                            <HtmlTooltip placement='right' title={\n                                Object.keys(skillData['skillPenaltys'][value]).map((v) => (<p>{v}: - {skillData['skillPenaltys'][value][v]}</p>))\n                            }>\n                                <Grid className='SkillValue verbose hidden' item>\n                                <p className='Num'>- {skillData['skillPenaltySum'][value]}</p>\n                                <p className='NumTag'>Penaltys</p>\n                                </Grid>\n                            </HtmlTooltip>\n                            :\n                            <Grid className='SkillValue verbose hidden' item>\n                                <p className='Num'>- {skillData['skillPenaltySum'][value]}</p>\n                                <p className='NumTag'>Penaltys</p>\n                            </Grid>\n                            }\n                            \n\n                            {this.props.scorePlacementMode ?\n                            <Grid className='SkillValue verbose hidden' item>\n                            <p className='Num'>{skillData['skillFinal'][value]}</p>\n                            <p className='NumTag'>Final</p>\n                            </Grid>\n                            :\n                            <Grid className='SkillValue' item>\n                            <p className='Num'>{skillData['skillFinal'][value]}</p>\n                            <p className='NumTag'>Final</p>\n                            </Grid>\n                            }\n\n                        </Grid>\n                    </Grid>\n                ))}\n                    \n\n                </Grid>\n            </Container>\n        )\n    }\n}",["77","78"],"/home/decent/projects/rogue-tinker/src/pages/ImportExport.js",[],"/home/decent/projects/rogue-tinker/src/pages/core.js",["79","80"],"import React from 'react';\nimport StatsBar from '../components/StatsBar'\nimport BaseRoll from './BaseRoll'\nimport CareerSelector from '../components/CareerSelector'\nimport ls from 'local-storage'\nimport './core.css'\nimport HomeworldSelector from '../components/HomeworldSelector';\n\nexport default class HeaderBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        // this.handleOnClick = this.handleOnClick.bind(this)\n        this.state = {\n        }\n    }\n\n    componentDidMount() {\n        console.log('core props: ', this.props)\n    }\n    render () {\n        if (this.props.baseRolled) {\n            return (\n                <div>\n                    <section className={'bookBuffer'}></section>\n\n                    <section className={'boundBox'} id='careerUpperBound'></section>\n                        <h1 id=\"careerComponent\" style={{paddingTop:'140px'}} ref={this.props.careerRef}>Career</h1>\n                        <div class=\"pageContainer\">\n                            <div class=\"pageSeam\">\n                            </div>\n                            <div id=\"careerPageContent\" class=\"pageContent\">\n                                <CareerSelector\n                                    selected={this.props.selected}\n                                    careerIndex={this.props.careerIndex}\n                                />\n                            </div>\n                        </div>\n                    <section className={'boundBox'} id='careerLowerBound'></section>\n                        \n                    <section className={'bookBuffer'}></section>\n\n\n\n\n                    <section className={'boundBox'} id='homeworldUpperBound'></section>\n                        <h1 id=\"homeworldComponent\" style={{paddingTop:'140px'}} ref={this.props.homeworldRef}>Homeworld</h1>\n                        <div class=\"pageContainer\">\n                            <div class=\"pageSeam\">\n                            </div>\n                            <div id=\"homeworldPageContent\" class=\"pageContent\">\n                                <HomeworldSelector\n                                    homeworldIndex={this.props.homeworldIndex}\n                                />\n                            </div>\n                        </div>\n                    <section className={'boundBox'} id='homeworldLowerBound'></section>\n\n\n\n\n\n                    <section className={'bookBuffer'}></section>\n\n                    <section className={'boundBox'} id='birthrightUpperBound'></section>\n                        <h1 id=\"birthrightComponent\" style={{paddingTop:'140px'}} ref={this.props.birthrightRef}>Birthright</h1>\n                        \n                        <div style={{height:'1000px'}}>\n                        </div>\n                    <section className={'boundBox'} id='birthrightLowerBound'></section>\n\n                    <section className={'bookBuffer'}></section>\n                    \n\n\n\n\n                    <section className={'boundBox'} id='lureOfTheVoidUpperBound'></section>\n                        <h1 id=\"lureOfTheVoidComponent\" style={{paddingTop:'140px'}} ref={this.props.lureOfTheVoidRef}>Lure of The Void</h1>\n                        \n                        <div style={{height:'1000px'}}>\n                        </div>\n                    <section className={'boundBox'} id='lureOfTheVoidLowerBound'></section>\n\n                    <section className={'bookBuffer'}></section>\n\n                    <section className={'boundBox'} id='trialsAndTravailsUpperBound'></section>\n                        <h1 id=\"trialsAndTravailsComponent\" style={{paddingTop:'140px'}} ref={this.props.trialsAndTravailsRef}>TRIALS AND TRAVAILS</h1>\n                        \n                        <div style={{height:'1000px'}}>\n                        </div>\n                    <section className={'boundBox'} id='trialsAndTravailsLowerBound'></section>\n\n                    <section className={'bookBuffer'}></section>\n\n                    <section className={'boundBox'} id='motivationUpperBound'></section>\n                        <h1 id=\"motivationComponent\" style={{paddingTop:'140px'}} ref={this.props.motivationRef}>Motivation</h1>\n                        \n                        <div style={{height:'1000px'}}>\n                        </div>\n                    <section className={'boundBox'} id='motivationLowerBound'></section>\n                        \n                    <section className={'bookBuffer'}></section>\n\n                </div>\n            )\n            \n        } else {\n            return (\n                <BaseRoll updateParentState={this.props.updateParentState}/>\n            )\n        }\n    }\n\n}","/home/decent/projects/rogue-tinker/src/pages/BaseRoll.js",["81","82"],"import React from 'react';\nimport { Container, Button, withStyles, ButtonGroup, Tooltip, Grid, TextField} from '@material-ui/core';\nimport './BaseRoll.css'\n\nconst HtmlTooltip = withStyles(() => ({\n    tooltip: {\n      backgroundColor: '#4c4c4c',\n        font: 12,\n      color: 'orange',\n    },\n  }))(Tooltip);\n\nconst CssTextField = withStyles(() => ({\n    root: {backgroundColor: '#2a2a2a'},\n    }))(TextField);\n\n\nexport default class BaseRoll extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleTypeChange = this.handleTypeChange.bind(this);\n        this.reRollLowest = this.reRollLowest.bind(this);\n        this.generateNumbers = this.generateNumbers.bind(this);\n        this.lockRolls = this.lockRolls.bind(this);\n        this.getBoxValues = this.getBoxValues.bind(this);\n\n        this.state = {\n            allBoxesFilled: false,\n            rolledState: false,\n            canReRoll: false,\n            baseType: 3,\n            rolls: [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],\n            scores: ['?','?','?','?','?','?','?','?','?']\n        }\n     }\n    \n     reRollLowest () {  \n        let scores = this.state.scores\n        let low = 99;\n        let lIndex = -1;\n        for (let index = 0; index < scores.length; index++) {\n            const element = scores[index];\n            if (element < low) {\n                low = element\n                lIndex = index\n            }\n        }\n\n        let rolls = this.state.rolls\n        rolls[lIndex][0] = this.roll() + 1\n        rolls[lIndex][1] = this.roll() + 1\n\n        scores[lIndex] = rolls[lIndex][0] + rolls[lIndex][1] + 25\n        this.setState({rolls:rolls, scores:scores, canReRoll:false})\n\n    }\n\n     lockRolls () {\n         let unalloc = {}\n\n         for (let i = 0; i < this.state.scores.length; i++) {\n             unalloc[i] = this.state.scores[i]\n         }\n\n        this.props.updateParentState({unallocatedValues: unalloc, baseRolls: this.state.scores, baseRolled: true})\n     }\n\n     handleTypeChange = (e, type) => {\n        let response = true\n        if (this.state.rolledState) {\n            response = window.confirm(\"Warning, data will be reset!\");\n        }\n        if (response) {\n\n        \n        document.getElementsByClassName('selectedType')[0].classList.remove('selectedType')\n        e.target.classList.add('selectedType')\n        this.setState({baseType: type})\n\n        let cSelect = document.getElementsByClassName('selectedTypeContainer')[0].classList\n        cSelect.remove('selectedTypeContainer')\n        cSelect.add('hidden')\n\n        this.setState({rolls: [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],\n            scores: ['?','?','?','?','?','?','?','?','?'], rolledState: false, canReRoll: false})\n\n        switch (type) {\n            case 1:\n                cSelect = document.getElementById('typeDiceRoll').classList\n                cSelect.add('selectedTypeContainer')\n                break;\n\n            case 2:\n                cSelect = document.getElementById('typePointBuy').classList\n                cSelect.add('selectedTypeContainer')\n                break;\n            \n            case 3:\n                cSelect = document.getElementById('typeManualEntry').classList\n                cSelect.add('selectedTypeContainer')\n                break;\n            default:\n                break;\n        }\n        }\n    }\n\n    roll() {\n        return (Math.round(Math.random()*10%9))\n    }\n\n    componentDidMount() {\n        console.log('base props: ', this.props)\n    }\n    \n    generateNumbers (e) {\n        let tRoll = [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]\n        let tScores = [0,0,0,0,0,0,0,0,0]\n        for (let index = 0; index < 9; index++) {\n            tRoll[index][0] = this.roll() + 1\n            tRoll[index][1] = this.roll() + 1\n            tScores[index] = tRoll[index][0] + tRoll[index][1] + 25\n        }\n        this.setState({rolls: tRoll, scores: tScores, rolledState:true, canReRoll:true})        \n    }\n\n    getBoxValues () {\n        let list = document.getElementsByClassName('scoreInputBox')\n        let values = this.state.scores\n        let count = 0;\n        for (let index = 0; index < list.length; index++) {\n            const element = list[index];\n            if (parseInt(element.children[0].children[0].value) > 0) {\n                count++\n                values[index] = parseInt(element.children[0].children[0].value)\n            }\n\n        }\n        this.setState({scores:values});\n\n        if (count === 9) {\n            this.setState({allBoxesFilled: true})\n        }\n    }\n\n    render () {\n        let roll = this.state.rolls\n        let scores = this.state.scores\n    \n        return (\n            <Container>\n                <div id='rollTypeContainer'>\n                    <div onClick={(e) => {this.handleTypeChange(e, 1)}} className='rollTypeButton selectedType'>Dice Roll</div>\n                    <div onClick={(e) => {this.handleTypeChange(e, 2)}} className='rollTypeButton'>Point Buy</div>\n                    <div onClick={(e) => {this.handleTypeChange(e, 3)}} className='rollTypeButton'>Manual Entry</div>\n                </div>\n\n                <div id=\"typeDiceRoll\" className=\"hidden selectedTypeContainer\">\n                \n                    <Grid className='rolledNumbersGridC' container justify=\"center\" direction=\"row\" spacing={2}>\n                    {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((value) => (\n                        <Grid key={value} item xs={1}>\n                            <HtmlTooltip title={<p>({roll[value][0]} + {roll[value][1]}) + 25</p>}>\n                                <h1 style={{animationDelay: ((scores[value]-25)/20)*-1 + 's'}} className='rolledScores'>{scores[value]}</h1></HtmlTooltip>\n                        </Grid>\n\n                    ))}\n\n                    </Grid>\n                    <div onClick={(e) => {this.generateNumbers(e, 1)}} className={`yellow-button ${this.state.rolledState ? \"hidden\" : \"\"}`}>Roll 2d10 + 25</div>\n                    <div onClick={(e) => {this.reRollLowest()}} id='reRollButton' className={`blue-button ${this.state.canReRoll ? \"\" : \"hidden\"}`} >Re-Roll lowest value?</div>\n                        <br></br>\n                    <div onClick={(e) => {this.lockRolls()}} id='lockRollsButton' className={`yellow-button ${this.state.rolledState ? \"\" : \"hidden\"}`}>Lock rolls</div>\n                </div>\n\n                <div id='typePointBuy' className='hidden'>\n                        <h1>pb</h1>\n                </div>\n\n                <div id='typeManualEntry' className='hidden'>\n                    <Grid className='rolledNumbersGridC' container justify=\"center\" direction=\"row\" spacing={2}>\n                        {[0, 1, 2, 3, 4, 5, 6, 7, 8].map((value) => (\n                            <Grid key={value} item xs={1}>\n                                <CssTextField className='scoreInputBox' onChange={this.getBoxValues} inputProps={{min:0, style:{textAlign:'center', color: 'white', fontSize:23}}}\n                                id=\"outlined-basic\" variant=\"outlined\" />\n                            </Grid>\n\n                        ))}\n\n                    </Grid>\n                <div onClick={(e) => {this.lockRolls()}} id='lockRollsButton' className={`yellow-button ${this.state.allBoxesFilled ? \"\" : \"hidden\"}`}>Lock rolls</div>\n                </div>\n\n            </Container>\n        )\n    }\n\n}","/home/decent/projects/rogue-tinker/src/components/CareerSelector.js",["83","84","85","86","87"],"import React from 'react';\nimport ArchmilitantImage from '../images/Female_Rogue_Trader.png'\nimport AstropathImage from '../images/astropath.png'\nimport './CareerSelector.css'\nimport { Container, Tooltip, withStyles, Grid} from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport RuleBook from './resources/rulebook.json'\n\nimport ObjectBoxes from './ObjectBoxes'\n\n\n  \n  \n  export default class CareerSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setSelectedItem = this.setSelectedItem.bind(this);\n        this.state = {\n            careerIndex: this.props.careerIndex,\n            careerItems: []\n         }\n     }\n\n     setSelectedItem(x, y, i) {\n        let j = 0\n        \n        while (document.getElementById('select' + x + '-' + j) !== null) {\n            let selected = this.props.selected['careerItems']\n\n            console.log(selected)\n            if (j === y) {\n                document.getElementById('select' + x + '-' + j).classList.add('selectedItem')\n                \n            } else {\n                document.getElementById('select' + x + '-' + j).classList.remove('selectedItem')\n            }\n            j = j + 1\n        }\n     }\n\n    render () {\n        let images = [AstropathImage, ArchmilitantImage]\n        return (\n            <Container maxWidth='xl'>\n                <div className='careerContainer'>\n                        <div>\n                        \n                        <div className='imageContainer'>\n                            <img className='careerImage' src={images[this.props.careerIndex]}></img>\n                        </div>\n                        <div className='textContainer'>\n                            {/* {console.log('CarInd', this.props.careerIndex)} */}\n                            <h2>{RuleBook.Career[this.props.careerIndex]['Title']}</h2>\n                            {RuleBook.Career[this.props.careerIndex]['Description'].map((Para) => <p>{Para}</p>)}\n                        </div>\n\n\n                        <div className='startingStats'>\n                            <h3 className=\"starterHeading\">\n                                Starting Skills\n                            </h3>\n                            <ObjectBoxes type={'Skill'} objects={RuleBook.Career[this.props.careerIndex]['StartingSkills']}/>\n                            \n                            <h3 className=\"starterHeading\">\n                            Starting Talents\n                            </h3>\n\n                            <ObjectBoxes type={'Talent'} objects={RuleBook.Career[this.props.careerIndex]['StartingTalents']} />\n\n                            <h3 className=\"starterHeading\">\n                                Starting Gear\n                            </h3>\n                            \n                            <ObjectBoxes callback={this.setSelectedItem} objects={RuleBook.Career[this.props.careerIndex]['StartingItems']} />\n                            {/* <ObjectBoxes type={'Item'} choices={true} objects={RuleBook.Career[this.props.careerIndex]['StartingItems']} callback={this.setSelectedItem}/> */}\n\n                            \n                        </div>\n                    </div>                        \n                </div>\n            </Container>\n        )\n    }\n}","/home/decent/projects/rogue-tinker/src/components/resources/StopScroll.js",["88"],"/home/decent/projects/rogue-tinker/src/components/ObjectBoxes.js",["89","90","91","92"],"\n import React from 'react';\n import {Grid, Tooltip, withStyles} from '@material-ui/core';\n import RuleBook from './resources/rulebook.json'\n import ObjectPopup from './ObjectPopup'\n\n\n import './ObjectBoxes.css'\n\n\n    export default class ObjectBoxes extends React.Component {\n        constructor(props) {    \n            super(props);\n            this.genChoice = this.genChoice.bind(this)\n        }\n\n    genChoice(o, x) {\n\n        let type\n        return (\n           <div className=\"ItemSelectBoxBox\">\n            {o['Choice'].map((i) => (\n            <div className=\"ItemSelectBox\" id={'select' + x + '-' + o['Choice'].indexOf(i)} onClick={() => this.props.callback(x, o['Choice'].indexOf(i), i)}>\n                {Object.keys(i).forEach(element => {            \n                    if (['Item', 'Skill', 'Talent', 'Feature', 'Attr', 'Type'].includes(element)) type = element\n                })}\n                \n                            \n                <ObjectPopup object={i}>\n                            {i.Quality && <span>{i.Quality} </span>}\n                            {i[type]}\n                            {i.Upgrades && <span> ({i.Upgrades.map((u) => (u))})</span>}\n                </ObjectPopup>\n                </div>\n                ))}\n            </div>\n\n        )\n            \n}\n    \n     render() {\n        \n        let type, choice\n        // console.log(this.props.objects)\n            \n            return (\n                <Grid container spacing={1}>\n                    {this.props.objects.map((o) => (\n                <ObjectPopup object={o}>\n                    \n                        {\n\n                            Object.keys(o).forEach(element => {            \n                                if (['Item', 'Skill', 'Talent', 'Feature', 'Attr'].includes(element)) type = element\n                                if (element === \"Choice\") choice = true\n                            })\n                        }\n                        {/* {console.log('object:', type)} */}\n                        {o[type] &&\n                           \n                                <div className={type + 'Box'}>\n                                    {o[type]}\n                                \n                                    {o.Value !== undefined && (' ' + o.Value > 0 ? ': + ' + o.Value : ': - ' + -1*o.Value)}\n                                    {(o.Groups !== undefined && o.Groups.length === 1) && (o.Groups[0]['Choose'] === undefined ? o.Groups.map((g) => (<span> ({g})</span>)) : <span>Choos One</span>)}\n                                    {(o.Groups !== undefined && o.Groups.length > 1) && (<span> ({o.Groups.map((g) => (<span>{ g}{g !== o.Groups[o.Groups.length - 1] && ', '}</span>))})</span>)}\n        \n                                </div>\n                           }\n                           {/* {console.log('OA', o)} */}\n                           {o['Choice'] &&\n                           this.genChoice(o, this.props.objects.indexOf(o))}\n                </ObjectPopup>\n                ))}\n                </Grid>\n            )\n        \n     }\n}","/home/decent/projects/rogue-tinker/src/components/ObjectPopup.js",[],"/home/decent/projects/rogue-tinker/src/components/HomeworldSelector.js",["93","94","95","96","97"],"import React from 'react';\nimport ArchmilitantImage from '../images/Female_Rogue_Trader.png'\nimport AstropathImage from '../images/astropath.png'\nimport './CareerSelector.css'\nimport { Container, Tooltip, withStyles, Grid} from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport RuleBook from './resources/rulebook.json'\n\nimport ObjectBoxes from './ObjectBoxes'\n\n\n  \n  \n  export default class HomeworldSelector extends React.Component {\n    constructor(props) {\n        super(props);\n        this.setSelectedItem = this.setSelectedItem.bind(this);\n        this.state = {\n            careerIndex: this.props.careerIndex,\n            careerItems: []\n         }\n     }\n\n    setSelectedItem (e, parentIndex, index, item) {\n        let id = 'itemSelectBox-' + parentIndex + '-' + index\n        \n        let elements = document.getElementsByClassName(parentIndex)\n        \n        for (let index = 0; index < Object.keys(elements).length; index++) {\n            elements[index].classList.remove('selectedItem')\n        }\n        document.getElementById(id).classList.add('selectedItem')\n        let tCareerItems = this.state.careerItems\n        tCareerItems[parentIndex] = item\n        this.setState({careerItems: tCareerItems})\n    }\n\n    render () {\n        let images = [AstropathImage, ArchmilitantImage]\n        let bookSection = RuleBook.Homeworld[this.props.homeworldIndex]\n        return (\n            <Container maxWidth='xl'>\n                <div className='careerContainer'>\n                        <div>\n                        \n                        <div className='imageContainer'>\n                            {/* <img className='careerImage' src={images[this.props.homeworldIndex]}></img> */}\n                        </div>\n                        \n                        {/* {console.log('import: ', this.props.homeworldIndex)} */}\n                        <div>\n                            <h2>{bookSection['Title']}</h2>\n                            <p><i>\"{bookSection['Quote']}\"</i></p>\n                            <p>{bookSection['Description']}</p>\n                            <h3>{bookSection['Life']['Title']}</h3>\n                            {bookSection['Life']['Description'].map((Para) => <p>{Para}</p>)}\n                        </div>\n                        \n                        \n                        <h3>{bookSection['Character Features']['Title']}</h3>\n                        <p>{bookSection['Character Features']['Description']}</p>\n                        <ObjectBoxes callback={console.log} objects={bookSection['Character Features']['Mods']} />\n\n                        {bookSection['Character Features']['Features'].map((feature) => (\n                            <div>\n                                <h4>{feature.Title}</h4>\n                                <p>{feature.Description}</p>\n                                {feature.Features !== undefined && <ObjectBoxes callback={console.log} objects={feature.Features} />}\n                            </div>\n\n                        ))}\n\n\n                        {/* <div className='startingStats'>\n                            <h3 className=\"starterHeading\">\n                                Starting Skills\n                            </h3>\n                            <ObjectBoxes type={'Skill'} objects={RuleBook.Homeworld[this.props.homeworldIndex]['StartingSkills']}/>\n                            \n                            <h3 className=\"starterHeading\">\n                            Starting Talents\n                            </h3>\n\n                            <ObjectBoxes type={'Talent'} objects={RuleBook.Homeworld[this.props.careerIndex]['StartingTalents']} />\n\n                            <h3 className=\"starterHeading\">\n                                Starting Gear\n                            </h3>\n                            \n                            <ObjectBoxes type={'Item'} objects={RuleBook.Homeworld[this.props.careerIndex]['StartingItems']} />\n                            <ObjectBoxes type={'Item'} choices={true} objects={RuleBook.Homeworld[this.props.careerIndex]['StartingItems']} callback={this.setSelectedItem}/>\n\n                            \n                        </div> */}\n                    </div>                        \n                </div>\n            </Container>\n        )\n    }\n}",{"ruleId":"98","severity":1,"message":"99","line":15,"column":10,"nodeType":"100","messageId":"101","endLine":15,"endColumn":14},{"ruleId":"98","severity":1,"message":"102","line":15,"column":16,"nodeType":"100","messageId":"101","endLine":15,"endColumn":25},{"ruleId":"98","severity":1,"message":"103","line":15,"column":35,"nodeType":"100","messageId":"101","endLine":15,"endColumn":42},{"ruleId":"98","severity":1,"message":"104","line":15,"column":44,"nodeType":"100","messageId":"101","endLine":15,"endColumn":54},{"ruleId":"98","severity":1,"message":"105","line":17,"column":9,"nodeType":"100","messageId":"101","endLine":17,"endColumn":22},{"ruleId":"98","severity":1,"message":"106","line":17,"column":24,"nodeType":"100","messageId":"101","endLine":17,"endColumn":36},{"ruleId":"107","severity":1,"message":"108","line":374,"column":19,"nodeType":"109","endLine":374,"endColumn":53},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"98","severity":1,"message":"114","line":2,"column":27,"nodeType":"100","messageId":"101","endLine":2,"endColumn":33},{"ruleId":"98","severity":1,"message":"115","line":2,"column":69,"nodeType":"100","messageId":"101","endLine":2,"endColumn":79},{"ruleId":"98","severity":1,"message":"116","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":25},{"ruleId":"98","severity":1,"message":"117","line":5,"column":8,"nodeType":"100","messageId":"101","endLine":5,"endColumn":10},{"ruleId":"118","severity":1,"message":"119","line":63,"column":22,"nodeType":"100","messageId":"120","endLine":63,"endColumn":23},{"ruleId":"121","severity":1,"message":"122","line":194,"column":124,"nodeType":"123","messageId":"124","endLine":194,"endColumn":125},{"ruleId":"110","replacedBy":"125"},{"ruleId":"112","replacedBy":"126"},{"ruleId":"98","severity":1,"message":"127","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":16},{"ruleId":"98","severity":1,"message":"117","line":5,"column":8,"nodeType":"100","messageId":"101","endLine":5,"endColumn":10},{"ruleId":"98","severity":1,"message":"114","line":2,"column":21,"nodeType":"100","messageId":"101","endLine":2,"endColumn":27},{"ruleId":"98","severity":1,"message":"128","line":2,"column":41,"nodeType":"100","messageId":"101","endLine":2,"endColumn":52},{"ruleId":"98","severity":1,"message":"103","line":5,"column":21,"nodeType":"100","messageId":"101","endLine":5,"endColumn":28},{"ruleId":"98","severity":1,"message":"104","line":5,"column":30,"nodeType":"100","messageId":"101","endLine":5,"endColumn":40},{"ruleId":"98","severity":1,"message":"99","line":5,"column":42,"nodeType":"100","messageId":"101","endLine":5,"endColumn":46},{"ruleId":"98","severity":1,"message":"129","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":24},{"ruleId":"130","severity":1,"message":"131","line":49,"column":29,"nodeType":"132","endLine":49,"endColumn":95},{"ruleId":"133","severity":1,"message":"134","line":20,"column":5,"nodeType":"135","messageId":"136","endLine":20,"endColumn":19},{"ruleId":"98","severity":1,"message":"103","line":3,"column":16,"nodeType":"100","messageId":"101","endLine":3,"endColumn":23},{"ruleId":"98","severity":1,"message":"104","line":3,"column":25,"nodeType":"100","messageId":"101","endLine":3,"endColumn":35},{"ruleId":"98","severity":1,"message":"137","line":4,"column":9,"nodeType":"100","messageId":"101","endLine":4,"endColumn":17},{"ruleId":"98","severity":1,"message":"138","line":56,"column":59,"nodeType":"100","messageId":"101","endLine":56,"endColumn":65},{"ruleId":"98","severity":1,"message":"103","line":5,"column":21,"nodeType":"100","messageId":"101","endLine":5,"endColumn":28},{"ruleId":"98","severity":1,"message":"104","line":5,"column":30,"nodeType":"100","messageId":"101","endLine":5,"endColumn":40},{"ruleId":"98","severity":1,"message":"99","line":5,"column":42,"nodeType":"100","messageId":"101","endLine":5,"endColumn":46},{"ruleId":"98","severity":1,"message":"129","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":24},{"ruleId":"98","severity":1,"message":"139","line":39,"column":13,"nodeType":"100","messageId":"101","endLine":39,"endColumn":19},"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'Tooltip' is defined but never used.","'withStyles' is defined but never used.","'disableScroll' is defined but never used.","'enableScroll' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["140"],"no-negated-in-lhs",["141"],"'Button' is defined but never used.","'InputLabel' is defined but never used.","'ArrowDropDownIcon' is defined but never used.","'ls' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",["140"],["141"],"'StatsBar' is defined but never used.","'ButtonGroup' is defined but never used.","'ArrowBackIosIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","getter-return","Expected to return a value in method 'get'.","FunctionExpression","expected","'RuleBook' is defined but never used.","'choice' is assigned a value but never used.","'images' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]